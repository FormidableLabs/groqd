import { Get, TypeMismatchError, ValueOf } from "./type-utils";

export type RootConfig = {
  /**
   * This should be the full schema types that is generated by @sanity-typed/types
   * @example
   * import { InferSchemaConfigValues } from "@sanity-typed/types";
   * import config from "./sanity.config.ts";
   *
   * type TSchema = InferSchemaConfigValues<typeof config>;
   */
  TSchema: object;
  /**
   * This symbol is exported by @sanity-typed/types
   * It's used to extract document types from a reference object.
   */
  referenceSymbol: symbol;
};

export type ExtractDocumentTypes<TRootConfig extends RootConfig> = Array<
  ValueOf<TRootConfig["TSchema"]>
>;

export type RefType<referenceSymbol extends symbol, TTypeName> = {
  [P in referenceSymbol]: TTypeName;
};

export type ExtractRefType<TScope, TRootConfig extends RootConfig> =
  //
  TScope extends RefType<TRootConfig["referenceSymbol"], infer TTypeName>
    ? Get<TRootConfig["TSchema"], TTypeName>
    : TypeMismatchError<{
        error: "Expected the object to be a reference type";
        expected: RefType<
          TRootConfig["referenceSymbol"],
          keyof TRootConfig["TSchema"]
        >;
        actual: TScope;
      }>;
